{"version":3,"sources":["assets/logo.png","components/tricks_grid.js","store/actions/actions.js","components/pages/discipline_page.js","components/disciplines_grid.js","components/disciplines_list.js","components/pages/home_page.js","components/navigation_bar.js","components/pages/trick_page.js","components/footer.js","App.js","serviceWorker.js","store/reducers/root_reducer.js","index.js"],"names":["module","exports","TricksGrid","handleClick","trick","props","updateActivePageAndTrick","generateTricks","activeTricks","sort","map","item","name","charAt","toUpperCase","slice","Card","className","key","onClick","Container","tricks","this","view","Spinner","animation","role","Component","connect","state","dispatch","page","type","activePage","activeTrick","DisciplinePage","getTricks","updateActiveTricks","axios","post","discipline","activeDiscipline","then","response","data","catch","error","console","log","align","DisciplinesGrid","updateActivePageAndDiscipline","generateDisciplines","disciplines","filter","area","activeArea","DisciplinesList","handleAreaButton","updateActiveArea","generateAreaButtons","areas","v","i","a","indexOf","buttons","Button","variant","ButtonGroup","HomePage","getDisciplines","get","result","updateDisciplines","NavigationBar","updateActivePage","Navbar","sticky","Brand","src","Logo","width","height","alt","TrickPage","videos","video","ListGroupItem","title","frameBorder","allowFullScreen","category","ListGroup","Footer","Nav","Link","href","App","assignPage","Boolean","window","location","hostname","match","initState","rootReducer","action","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.9f78c099.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.a594316b.png\";","import React, { Component } from \"react\";\r\nimport { Card, Container, Spinner} from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport { updateActivePageAndTrick } from \"../store/actions/actions\";\r\n\r\nclass TricksGrid extends Component  {\r\n    handleClick = (trick) => {\r\n        this.props.updateActivePageAndTrick(\"TRICK_PAGE\", trick);\r\n    }\r\n\r\n    generateTricks = () => {\r\n        // Generate grid of existing disciplines basing on activeDiscipline stired in Redux\r\n        const items = this.props.activeTricks ? this.props.activeTricks.sort().map(item => {\r\n            const name = item.name.charAt(0).toUpperCase() + item.name.slice(1);\r\n\r\n            return (\r\n                <div>\r\n                    <Card className=\"card\"  key={item.name} onClick={() => this.handleClick(item)}>\r\n                        <Container className=\"card-body align-items-center d-flex justify-content-center\">\r\n                            <h4 className=\"card-title\">{name}</h4>\r\n                        </Container>\r\n                    </Card>\r\n                </div>\r\n            )\r\n        }) : null;\r\n\r\n        return items;\r\n    }\r\n    render() {\r\n        const tricks = this.generateTricks();\r\n        const view = tricks ? (\r\n            <div className=\"grid\">\r\n                { tricks }\r\n            </div>\r\n        ) : (\r\n            <Spinner className=\"center\" animation=\"border\" role=\"status\">\r\n                <span className=\"sr-only\">Loading...</span>\r\n            </Spinner>\r\n        );\r\n        return (\r\n            <Container>\r\n                { view }\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        activeTricks: state.activeTricks,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateActivePageAndTrick: (page, trick) => { dispatch(updateActivePageAndTrick(page, trick)) }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TricksGrid);","export const updateDisciplines = (disciplines) => {\r\n    return {\r\n        type: \"UPDATE_DISCIPLINES\",\r\n        disciplines: disciplines\r\n    }\r\n}\r\n\r\nexport const updateActiveArea = (area) => {\r\n    return {\r\n        type: \"UPDATE_ACTIVE_AREA\",\r\n        activeArea: area\r\n    }\r\n}\r\n\r\nexport const updateActiveTricks = (tricks) => {\r\n    return {\r\n        type: \"UPDATE_ACTIVE_TRICKS\",\r\n        activeTricks: tricks\r\n    }\r\n}\r\n\r\nexport const updateActiveTrick = (trick) => {\r\n    return {\r\n        type: \"UPDATE_ACTIVE_TRICK\",\r\n        activeTrick: trick\r\n    }\r\n}\r\n\r\nexport const updateActivePage = (page) => {\r\n    return {\r\n        type: \"UPDATE_ACTIVE_PAGE\",\r\n        activePage: page\r\n    }\r\n}\r\n\r\nexport const updateActivePageAndDiscipline = (page, discipline) => {\r\n    return {\r\n        type: \"UPDATE_ACTIVE_PAGE_AND_DISCIPLINE\",\r\n        activePage: page,\r\n        activeDiscipline: discipline\r\n    }\r\n}\r\n\r\nexport const updateActivePageAndTrick = (page, trick) => {\r\n    return {\r\n        type: \"UPDATE_ACTIVE_PAGE_AND_TRICK\",\r\n        activePage: page,\r\n        activeTrick: trick\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport axios from 'axios';\r\nimport { connect } from \"react-redux\";\r\nimport { Container } from 'react-bootstrap';\r\nimport { updateActiveTricks } from '../../store/actions/actions';\r\nimport TricksGrid from '../tricks_grid';\r\n\r\nclass DisciplinePage extends Component {\r\n    // Shows discipline page - name and tricks belonging to discipline\r\n    \r\n    getTricks = () => {\r\n        this.props.updateActiveTricks(null); // Always clear tricks in the cache\r\n\r\n        // POST    /api/tricks : Get all tricks belonging to discipline identified by \"name\"\r\n        axios.post('https://trickbase.herokuapp.com/api/tricks', {\r\n            discipline: this.props.activeDiscipline.name,\r\n         })\r\n         .then( response => {\r\n             // handle Success\r\n             this.props.updateActiveTricks(response.data.tricks);\r\n         })\r\n         .catch(error => {\r\n             // handle error\r\n           console.log(error);\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getTricks();\r\n    }\r\n\r\n    render() {\r\n        // Capitalize first letter of discipline's name\r\n        const name = this.props.activeDiscipline.name.charAt(0).toUpperCase() + this.props.activeDiscipline.name.slice(1);\r\n        \r\n        return (\r\n            <Container align=\"center\">\r\n                <h1 className=\"title\"> {name} </h1>\r\n                <TricksGrid />\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        activeDiscipline: state.activeDiscipline,\r\n        activeTricks: state.activeTricks\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateActiveTricks: (tricks) => { dispatch(updateActiveTricks(tricks)) }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DisciplinePage);","import React, { Component } from \"react\";\r\nimport { Container, Card } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport {  updateActivePageAndDiscipline } from \"../store/actions/actions\";\r\n\r\nclass DisciplinesGrid extends Component  {\r\n    handleClick = (discipline) => {\r\n        this.props.updateActivePageAndDiscipline(\"DISCIPLINE_PAGE\", discipline);\r\n    }\r\n\r\n    generateDisciplines = () => {\r\n        // Generate grid of existing disciplines basing on activeDiscipline stired in Redux\r\n        const items = this.props.disciplines.filter(item => item.area === this.props.activeArea).sort().map(item => {\r\n            const name = item.name.charAt(0).toUpperCase() + item.name.slice(1); // Capitalize first letter, ONLY FOR BUTTON LABEL\r\n            return (\r\n                <div>\r\n                    <Card className=\"card\" key={item.name} onClick={() => this.handleClick(item)}>\r\n                        <Container className=\"card-body align-items-center d-flex justify-content-center\">\r\n                            <h4 className=\"card-title\">{name}</h4>\r\n                        </Container>\r\n                    </Card>\r\n                </div>\r\n            )\r\n        })\r\n\r\n        return items;\r\n    }\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <div className=\"grid\">\r\n                    {this.generateDisciplines()}\r\n                </div>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        activeArea: state.activeArea,\r\n        disciplines: state.disciplines,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateActivePageAndDiscipline: (page, discipline) => { dispatch(updateActivePageAndDiscipline(page, discipline)) }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DisciplinesGrid);","import React, { Component } from \"react\";\r\nimport { ButtonGroup, Container, Button} from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport DisciplinesGrid from \"./disciplines_grid\";\r\nimport { updateActiveArea } from \"../store/actions/actions\";\r\n\r\nclass DisciplinesList extends Component {\r\n    handleAreaButton = (area) => {\r\n        this.props.updateActiveArea(area);\r\n    }\r\n\r\n    generateAreaButtons = () => {\r\n        // Get areas from disciplines stored in redux store\r\n        const areas = this.props.disciplines.map(item => {\r\n            return item.area\r\n        }).filter((v, i, a) => a.indexOf(v) === i).sort(); // Eliminates duplicate values\r\n\r\n        if (this.props.activeArea === null) { // Set default area = first item from areas\r\n            this.handleAreaButton(areas[0]);\r\n        }\r\n\r\n        // Create unique buttons \r\n        const buttons = areas.map(item => {\r\n            const name = item.charAt(0).toUpperCase() + item.slice(1); // Capitalize first letter, ONLY FOR BUTTON LABEL\r\n            return <Button variant=\"secondary\" key={item} onClick={() => this.handleAreaButton(item) }>{name}</Button>\r\n        })\r\n        \r\n        // Return Component - button group\r\n        return (\r\n            <ButtonGroup className=\"overflow-auto\">\r\n                { buttons }\r\n            </ButtonGroup>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"disciplines-list\">\r\n                <Container className=\"d-flex justify-content-center\">\r\n                    { this.generateAreaButtons() }   \r\n                </Container>\r\n                <DisciplinesGrid />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateActiveArea: (area) => { dispatch(updateActiveArea(area)) }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        activeArea: state.activeArea,\r\n        disciplines: state.disciplines,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DisciplinesList);","import axios from \"axios\";\r\nimport React, { Component } from \"react\";\r\nimport { Spinner } from \"react-bootstrap\";\r\nimport { connect } from 'react-redux';\r\nimport { updateDisciplines } from \"../../store/actions/actions\";\r\nimport DisciplinesList from \"../disciplines_list\";\r\n\r\n\r\nclass HomePage extends Component {\r\n    // Displays Home with discipline's grid \r\n\r\n    getDisciplines = () => {\r\n        // Get disciplines from DB and dispatch store\r\n        axios.get(\"https://trickbase.herokuapp.com/api/disciplines\").then(\r\n            // handle success\r\n            result => {\r\n                this.props.updateDisciplines(result.data.disciplines);\r\n            }\r\n        )\r\n        .catch(function (error) {\r\n            // handle error\r\n            console.log(error);\r\n          })\r\n          .then(function () {\r\n            // always executed\r\n          });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getDisciplines();\r\n    }\r\n\r\n    render() {\r\n        const view = this.props.disciplines ? (\r\n            <DisciplinesList />    \r\n        ) : (\r\n            <Spinner className=\"center\" animation=\"border\" role=\"status\">\r\n                <span className=\"sr-only\">Loading...</span>\r\n            </Spinner>\r\n        );\r\n\r\n        return view\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        disciplines: state.disciplines\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateDisciplines: (disciplines) => { dispatch(updateDisciplines(disciplines)) }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);","import React, { Component } from \"react\";\r\nimport { Navbar } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport Logo from '../assets/logo.png'; \r\nimport { updateActivePage } from \"../store/actions/actions\";\r\n\r\nclass NavigationBar extends Component {\r\n    handleClick = () => {\r\n        this.props.updateActivePage(\"HOME_PAGE\");\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Navbar variant=\"dark\" sticky=\"top\">\r\n            <div className=\"transparent-button\" onClick={this.handleClick}>\r\n                <Navbar.Brand>\r\n                    <img\r\n                        src={Logo}\r\n                        width=\"65\"\r\n                        height=\"65\"\r\n                        className=\"d-inline-block\"\r\n                        alt=\"Logo\"\r\n                    />\r\n                    <p className=\"d-inline-block trick\">Trick</p>\r\n                    <p className=\"d-inline-block base\">Base</p>\r\n                </Navbar.Brand>\r\n            </div>\r\n        </Navbar>\r\n    );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateActivePage: (page) => { dispatch(updateActivePage(page)) }\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(NavigationBar);","import React, { Component } from 'react'\r\nimport { connect } from \"react-redux\";\r\nimport { Container, ListGroup, ListGroupItem } from 'react-bootstrap';\r\n\r\nclass TrickPage extends Component {\r\n    // Shows trick page with associated videos\r\n\r\n    render() {\r\n            const videos = this.props.activeTrick.videos.map(video => { \r\n                return <ListGroupItem className=\"embed-responsive embed-responsive-16by9 trick-video\" key={video}>\r\n                    <iframe className=\"embed-responsive-item\" title={video} src={video} frameBorder=\"0\" allowFullScreen></iframe>\r\n                </ListGroupItem> \r\n            });\r\n            \r\n            const discipline = this.props.activeTrick.discipline.charAt(0).toUpperCase() + this.props.activeTrick.discipline.slice(1); // Capitalize first letter, ONLY FOR BUTTON LABEL\r\n            const trick = this.props.activeTrick.name.charAt(0).toUpperCase() + this.props.activeTrick.name.slice(1);\r\n            const category = this.props.activeTrick.category.charAt(0).toUpperCase() + this.props.activeTrick.category.slice(1);\r\n\r\n            const view = this.props.activeTrick ? (\r\n                <Container align=\"center\">\r\n                    <h1 className=\"title\"> {discipline + \": \" + trick}</h1>\r\n                    <p className=\"description\"> {category}</p>\r\n                    <ListGroup>\r\n                        { videos }\r\n                    </ListGroup>\r\n                </Container>\r\n            ) : null;\r\n        \r\n            return view;\r\n        }\r\n    }\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        activeTrick: state.activeTrick\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(TrickPage);","import React from \"react\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <div className=\"fixed-bottom\">  \r\n            <Navbar>\r\n                <Nav className=\"mx-auto\">\r\n                    <Nav.Link href=\"https://github.com/maksmaxx/trick_base\" className=\"footer-label\"> About </Nav.Link>\r\n                </Nav>\r\n            </Navbar>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport DisciplinePage from './components/pages/discipline_page';\nimport HomePage from './components/pages/home_page';\nimport NavigationBar from './components/navigation_bar';\nimport TrickPage from './components/pages/trick_page';\nimport Footer from './components/footer';\n\nclass App extends Component {\n  assignPage = () => {\n    const page = this.props.activePage;\n    if (page === \"HOME_PAGE\") return <HomePage />\n    if (page === \"DISCIPLINE_PAGE\") return <DisciplinePage />\n    if (page === \"TRICK_PAGE\") return <TrickPage />\n    else return <HomePage />\n  }\n\n  render() {\n    const page = this.assignPage();\n    return (\n        <div className=\"App\">\n          <NavigationBar /> \n          { page }\n          <Footer />\n        </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n      activePage: state.activePage\n  }\n}\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initState = {\r\n    activePage: \"HOME_PAGE\",    // Current displayed page\r\n    activeArea: null,           // At Home page, active area is area chosen to display certain disciplines\r\n    activeDiscipline: null,     // etc.\r\n    activeTrick: null,          // All tricks displayed after when discipline's chosen\r\n    activeTricks: null,         // At Disicpline Page: tricks to be shown belonging to certain discipline\r\n    disciplines: null,          // All cached disciplines gotten from Axios(GET)\r\n}\r\n\r\nconst rootReducer = (state = initState, action) => {\r\n    if (action.type === \"UPDATE_DISCIPLINES\") {\r\n        return {\r\n            ...state,\r\n            disciplines: action.disciplines\r\n        }\r\n    }\r\n    \r\n    if (action.type === \"UPDATE_ACTIVE_AREA\") {\r\n        return {\r\n            ...state,\r\n            activeArea: action.activeArea\r\n        }\r\n    }\r\n\r\n    if (action.type === \"UPDATE_ACTIVE_TRICKS\") {\r\n        return {\r\n            ...state,\r\n            activeTricks: action.activeTricks\r\n        }\r\n    }\r\n\r\n    if (action.type === \"UPDATE_ACTIVE_TRICK\") {\r\n        return {\r\n            ...state,\r\n            activeTrick: action.activeTrick\r\n        }\r\n    }\r\n\r\n    if (action.type === \"UPDATE_ACTIVE_PAGE\") {\r\n        return {\r\n            ...state,\r\n            activePage: action.activePage\r\n        }\r\n    }\r\n\r\n    if (action.type === \"UPDATE_ACTIVE_PAGE_AND_DISCIPLINE\") {\r\n        return {\r\n            ...state,\r\n            activePage: action.activePage,\r\n            activeDiscipline: action.activeDiscipline\r\n        }\r\n    }\r\n\r\n    if (action.type === \"UPDATE_ACTIVE_PAGE_AND_TRICK\") {\r\n        return {\r\n            ...state,\r\n            activePage: action.activePage,\r\n            activeTrick: action.activeTrick\r\n        }\r\n    }\r\n\r\n    return state;\r\n} \r\n\r\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport rootReducer from './store/reducers/root_reducer';\nimport { Provider } from 'react-redux';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Required for Bootstrap to work\n\nconst store = createStore(rootReducer) // A redux Store for the whole app\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}